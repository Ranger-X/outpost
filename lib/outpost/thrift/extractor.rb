#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'extractor_types'

module Extractor
  class Client
    include ::Thrift::Client

    def getSearchKey(siteId, referrer, url)
      send_getSearchKey(siteId, referrer, url)
      return recv_getSearchKey()
    end

    def send_getSearchKey(siteId, referrer, url)
      send_message('getSearchKey', GetSearchKey_args, :siteId => siteId, :referrer => referrer, :url => url)
    end

    def recv_getSearchKey()
      result = receive_message(GetSearchKey_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSearchKey failed: unknown result')
    end

    def getRealSearchKey(siteId, referrer, url)
      send_getRealSearchKey(siteId, referrer, url)
      return recv_getRealSearchKey()
    end

    def send_getRealSearchKey(siteId, referrer, url)
      send_message('getRealSearchKey', GetRealSearchKey_args, :siteId => siteId, :referrer => referrer, :url => url)
    end

    def recv_getRealSearchKey()
      result = receive_message(GetRealSearchKey_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRealSearchKey failed: unknown result')
    end

    def getNormalizedKeyword(siteId, referrer, url)
      send_getNormalizedKeyword(siteId, referrer, url)
      return recv_getNormalizedKeyword()
    end

    def send_getNormalizedKeyword(siteId, referrer, url)
      send_message('getNormalizedKeyword', GetNormalizedKeyword_args, :siteId => siteId, :referrer => referrer, :url => url)
    end

    def recv_getNormalizedKeyword()
      result = receive_message(GetNormalizedKeyword_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNormalizedKeyword failed: unknown result')
    end

    def normalizePartnerKeyword(siteId, keyword)
      send_normalizePartnerKeyword(siteId, keyword)
      return recv_normalizePartnerKeyword()
    end

    def send_normalizePartnerKeyword(siteId, keyword)
      send_message('normalizePartnerKeyword', NormalizePartnerKeyword_args, :siteId => siteId, :keyword => keyword)
    end

    def recv_normalizePartnerKeyword()
      result = receive_message(NormalizePartnerKeyword_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'normalizePartnerKeyword failed: unknown result')
    end

    def normalizeKeyword(keyword)
      send_normalizeKeyword(keyword)
      return recv_normalizeKeyword()
    end

    def send_normalizeKeyword(keyword)
      send_message('normalizeKeyword', NormalizeKeyword_args, :keyword => keyword)
    end

    def recv_normalizeKeyword()
      result = receive_message(NormalizeKeyword_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'normalizeKeyword failed: unknown result')
    end

    def getGeoLocation(ip)
      send_getGeoLocation(ip)
      return recv_getGeoLocation()
    end

    def send_getGeoLocation(ip)
      send_message('getGeoLocation', GetGeoLocation_args, :ip => ip)
    end

    def recv_getGeoLocation()
      result = receive_message(GetGeoLocation_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGeoLocation failed: unknown result')
    end

    def getUserInfo(userAgent)
      send_getUserInfo(userAgent)
      return recv_getUserInfo()
    end

    def send_getUserInfo(userAgent)
      send_message('getUserInfo', GetUserInfo_args, :userAgent => userAgent)
    end

    def recv_getUserInfo()
      result = receive_message(GetUserInfo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserInfo failed: unknown result')
    end

    def getProfile(ip, userAgent)
      send_getProfile(ip, userAgent)
      return recv_getProfile()
    end

    def send_getProfile(ip, userAgent)
      send_message('getProfile', GetProfile_args, :ip => ip, :userAgent => userAgent)
    end

    def recv_getProfile()
      result = receive_message(GetProfile_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfile failed: unknown result')
    end

    def getProfileSegmentName(siteId, ip, userAgent)
      send_getProfileSegmentName(siteId, ip, userAgent)
      return recv_getProfileSegmentName()
    end

    def send_getProfileSegmentName(siteId, ip, userAgent)
      send_message('getProfileSegmentName', GetProfileSegmentName_args, :siteId => siteId, :ip => ip, :userAgent => userAgent)
    end

    def recv_getProfileSegmentName()
      result = receive_message(GetProfileSegmentName_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfileSegmentName failed: unknown result')
    end

    def getProfileSegmentNameInGroup(group, siteId, ip, userAgent)
      send_getProfileSegmentNameInGroup(group, siteId, ip, userAgent)
      return recv_getProfileSegmentNameInGroup()
    end

    def send_getProfileSegmentNameInGroup(group, siteId, ip, userAgent)
      send_message('getProfileSegmentNameInGroup', GetProfileSegmentNameInGroup_args, :group => group, :siteId => siteId, :ip => ip, :userAgent => userAgent)
    end

    def recv_getProfileSegmentNameInGroup()
      result = receive_message(GetProfileSegmentNameInGroup_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfileSegmentNameInGroup failed: unknown result')
    end

    def getProfileAndNormalizedKeyword(ip, userAgent, siteId, referrer, url)
      send_getProfileAndNormalizedKeyword(ip, userAgent, siteId, referrer, url)
      return recv_getProfileAndNormalizedKeyword()
    end

    def send_getProfileAndNormalizedKeyword(ip, userAgent, siteId, referrer, url)
      send_message('getProfileAndNormalizedKeyword', GetProfileAndNormalizedKeyword_args, :ip => ip, :userAgent => userAgent, :siteId => siteId, :referrer => referrer, :url => url)
    end

    def recv_getProfileAndNormalizedKeyword()
      result = receive_message(GetProfileAndNormalizedKeyword_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfileAndNormalizedKeyword failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getSearchKey(seqid, iprot, oprot)
      args = read_args(iprot, GetSearchKey_args)
      result = GetSearchKey_result.new()
      result.success = @handler.getSearchKey(args.siteId, args.referrer, args.url)
      write_result(result, oprot, 'getSearchKey', seqid)
    end

    def process_getRealSearchKey(seqid, iprot, oprot)
      args = read_args(iprot, GetRealSearchKey_args)
      result = GetRealSearchKey_result.new()
      result.success = @handler.getRealSearchKey(args.siteId, args.referrer, args.url)
      write_result(result, oprot, 'getRealSearchKey', seqid)
    end

    def process_getNormalizedKeyword(seqid, iprot, oprot)
      args = read_args(iprot, GetNormalizedKeyword_args)
      result = GetNormalizedKeyword_result.new()
      result.success = @handler.getNormalizedKeyword(args.siteId, args.referrer, args.url)
      write_result(result, oprot, 'getNormalizedKeyword', seqid)
    end

    def process_normalizePartnerKeyword(seqid, iprot, oprot)
      args = read_args(iprot, NormalizePartnerKeyword_args)
      result = NormalizePartnerKeyword_result.new()
      result.success = @handler.normalizePartnerKeyword(args.siteId, args.keyword)
      write_result(result, oprot, 'normalizePartnerKeyword', seqid)
    end

    def process_normalizeKeyword(seqid, iprot, oprot)
      args = read_args(iprot, NormalizeKeyword_args)
      result = NormalizeKeyword_result.new()
      result.success = @handler.normalizeKeyword(args.keyword)
      write_result(result, oprot, 'normalizeKeyword', seqid)
    end

    def process_getGeoLocation(seqid, iprot, oprot)
      args = read_args(iprot, GetGeoLocation_args)
      result = GetGeoLocation_result.new()
      result.success = @handler.getGeoLocation(args.ip)
      write_result(result, oprot, 'getGeoLocation', seqid)
    end

    def process_getUserInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetUserInfo_args)
      result = GetUserInfo_result.new()
      result.success = @handler.getUserInfo(args.userAgent)
      write_result(result, oprot, 'getUserInfo', seqid)
    end

    def process_getProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetProfile_args)
      result = GetProfile_result.new()
      result.success = @handler.getProfile(args.ip, args.userAgent)
      write_result(result, oprot, 'getProfile', seqid)
    end

    def process_getProfileSegmentName(seqid, iprot, oprot)
      args = read_args(iprot, GetProfileSegmentName_args)
      result = GetProfileSegmentName_result.new()
      result.success = @handler.getProfileSegmentName(args.siteId, args.ip, args.userAgent)
      write_result(result, oprot, 'getProfileSegmentName', seqid)
    end

    def process_getProfileSegmentNameInGroup(seqid, iprot, oprot)
      args = read_args(iprot, GetProfileSegmentNameInGroup_args)
      result = GetProfileSegmentNameInGroup_result.new()
      result.success = @handler.getProfileSegmentNameInGroup(args.group, args.siteId, args.ip, args.userAgent)
      write_result(result, oprot, 'getProfileSegmentNameInGroup', seqid)
    end

    def process_getProfileAndNormalizedKeyword(seqid, iprot, oprot)
      args = read_args(iprot, GetProfileAndNormalizedKeyword_args)
      result = GetProfileAndNormalizedKeyword_result.new()
      result.success = @handler.getProfileAndNormalizedKeyword(args.ip, args.userAgent, args.siteId, args.referrer, args.url)
      write_result(result, oprot, 'getProfileAndNormalizedKeyword', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetSearchKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SITEID = 1
    REFERRER = 2
    URL = 3

    FIELDS = {
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      REFERRER => {:type => ::Thrift::Types::STRING, :name => 'referrer'},
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSearchKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SearchKey}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRealSearchKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SITEID = 1
    REFERRER = 2
    URL = 3

    FIELDS = {
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      REFERRER => {:type => ::Thrift::Types::STRING, :name => 'referrer'},
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRealSearchKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SearchKey}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNormalizedKeyword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SITEID = 1
    REFERRER = 2
    URL = 3

    FIELDS = {
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      REFERRER => {:type => ::Thrift::Types::STRING, :name => 'referrer'},
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNormalizedKeyword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NormalizePartnerKeyword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SITEID = 1
    KEYWORD = 2

    FIELDS = {
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      KEYWORD => {:type => ::Thrift::Types::STRING, :name => 'keyword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NormalizePartnerKeyword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NormalizeKeyword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEYWORD = 1

    FIELDS = {
      KEYWORD => {:type => ::Thrift::Types::STRING, :name => 'keyword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NormalizeKeyword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGeoLocation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IP = 1

    FIELDS = {
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGeoLocation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GeoLocation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERAGENT = 1

    FIELDS = {
      USERAGENT => {:type => ::Thrift::Types::STRING, :name => 'userAgent'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UserInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IP = 1
    USERAGENT = 2

    FIELDS = {
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      USERAGENT => {:type => ::Thrift::Types::STRING, :name => 'userAgent'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Profile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileSegmentName_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SITEID = 1
    IP = 2
    USERAGENT = 3

    FIELDS = {
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      USERAGENT => {:type => ::Thrift::Types::STRING, :name => 'userAgent'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileSegmentName_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileSegmentNameInGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUP = 1
    SITEID = 2
    IP = 3
    USERAGENT = 4

    FIELDS = {
      GROUP => {:type => ::Thrift::Types::STRING, :name => 'group'},
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      USERAGENT => {:type => ::Thrift::Types::STRING, :name => 'userAgent'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileSegmentNameInGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileAndNormalizedKeyword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IP = 1
    USERAGENT = 2
    SITEID = 3
    REFERRER = 4
    URL = 5

    FIELDS = {
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      USERAGENT => {:type => ::Thrift::Types::STRING, :name => 'userAgent'},
      SITEID => {:type => ::Thrift::Types::STRING, :name => 'siteId'},
      REFERRER => {:type => ::Thrift::Types::STRING, :name => 'referrer'},
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfileAndNormalizedKeyword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProfileAndKeyword}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

